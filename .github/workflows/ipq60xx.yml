name: OpenWrt Multi-Branch Build

on:
  schedule:
    # 北京时间每周五0点（UTC时间周四16点）
    - cron: '0 16 * * 4'
  workflow_dispatch:
    inputs:
      branch_filter:
        description: '选择要编译的分支 (留空编译全部)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - openwrt
          - immwrt
          - libwrt
      config_filter:
        description: '选择配置类型 (留空编译全部)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - Pro
          - Max
          - Ultra

env:
  REPO_OPENWRT: https://github.com/laipeng668/openwrt.git
  REPO_IMMWRT: https://github.com/laipeng668/immortalwrt.git
  REPO_LIBWRT: https://github.com/laipeng668/openwrt-6.x.git
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: scripts/diy.sh
  UPLOAD_BIN_DIR: ./upload
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  ICON_SUCCESS: "✅"
  ICON_ERROR: "❌"
  ICON_WARNING: "⚠️"
  ICON_INFO: "ℹ️"
  ICON_START: "🚀"
  ICON_END: "🏁"
  ICON_PROGRESS: "⏳"
  ICON_DEBUG: "🔍"
  ICON_CONFIG: "⚙️"
  ICON_PACKAGE: "📦"
  ICON_CACHE: "💾"
  ICON_BUILD: "🔨"
  ICON_CLEAN: "🧹"

jobs:
  # 设置作业：准备环境并提取设备列表
  setup:
    runs-on: ubuntu-22.04
    outputs:
      devices: ${{ steps.extract-devices.outputs.devices }}
      matrix-include: ${{ steps.generate-matrix.outputs.matrix }}
      kernel-version: ${{ steps.get-kernel.outputs.version }}
      build-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: ${{ env ICON_START }} 检出代码
        uses: actions/checkout@v4

      - name: ${{ env ICON_CONFIG }} 提取设备列表
        id: extract-devices
        run: |
          echo "🔍 正在提取设备列表..."
          
          # 从base_ipq60xx.config提取设备名
          DEVICES=$(grep -oE 'CONFIG_TARGET_DEVICE_.*_DEVICE_[^=]+=y' configs/base_ipq60xx.config | \
                   sed -E 's/CONFIG_TARGET_DEVICE_.*_DEVICE_([^=]+)=y/\1/' | \
                   tr '\n' ' ')
          
          echo "📋 发现设备: $DEVICES"
          echo "devices=$DEVICES" >> $GITHUB_OUTPUT
          
          # 保存到文件供后续作业使用
          echo "$DEVICES" > devices.txt

      - name: ${{ env ICON_CONFIG }} 生成编译矩阵
        id: generate-matrix
        run: |
          # 读取设备列表
          DEVICES=$(cat devices.txt)
          
          # 定义分支配置
          BRANCHES='[
            {"name": "openwrt", "repo": "${{ env.REPO_OPENWRT }}", "branch": "master", "short": "openwrt"},
            {"name": "immwrt", "repo": "${{ env.REPO_IMMWRT }}", "branch": "master", "short": "immwrt"},
            {"name": "libwrt", "repo": "${{ env.REPO_LIBWRT }}", "branch": "k6.12-nss", "short": "libwrt"}
          ]'
          
          # 定义配置类型
          CONFIGS='["Pro", "Max", "Ultra"]'
          
          # 生成矩阵
          MATRIX=$(jq -n \
            --argjson branches "$BRANCHES" \
            --argjson configs "$CONFIGS" \
            --arg devices "$DEVICES" \
            '{
              branch: $branches,
              config: $configs,
              device: ($devices | split(" ") | map(select(length > 0)))
            }')
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "📊 编译矩阵生成完成"

      - name: ${{ env ICON_INFO }} 获取内核版本
        id: get-kernel
        run: |
          # 这里需要从源码获取，暂时使用默认值
          echo "version=6.6.50" >> $GITHUB_OUTPUT

      - name: ${{ env ICON_INFO }} 获取构建日期
        id: get-date
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  # 构建作业：使用矩阵策略并行编译
  build:
    needs: setup
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix-include) }}
        # 如果用户指定了过滤条件，则应用过滤
        ${{ if github.event.inputs.branch_filter }}
        branch:
          - ${{ github.event.inputs.branch_filter }}
        ${{ if github.event.inputs.config_filter }}
        config:
          - ${{ github.event.inputs.config_filter }}
    
    steps:
      - name: ${{ env ICON_START }} 检出代码
        uses: actions/checkout@v4

      - name: ${{ env ICON_CACHE }} 缓存源码
        uses: actions/cache@v3
        id: cache-source
        with:
          path: openwrt
          key: ${{ matrix.branch.short }}-${{ matrix.branch.branch }}-${{ hashFiles('**/clone.sh') }}
          restore-keys: |
            ${{ matrix.branch.short }}-${{ matrix.branch.branch }}-

      - name: ${{ env ICON_PACKAGE }} 克隆源码
        if: steps.cache-source.outputs.cache-hit != 'true'
        run: |
          echo "📥 克隆 ${{ matrix.branch.name }} 源码..."
          git clone ${{ matrix.branch.repo }} -b ${{ matrix.branch.branch }} openwrt
          cd openwrt
          
          # 记录版本信息
          echo "源码版本: $(git rev-parse --short HEAD)" > ../source_info.txt
          echo "分支: ${{ matrix.branch.branch }}" >> ../source_info.txt

      - name: ${{ env ICON_CONFIG }} 合并配置文件
        run: |
          echo "⚙️ 开始合并配置文件..."
          
          # 创建临时目录
          mkdir -p temp_config
          
          # 按优先级合并配置（最后的最优先）
          cat configs/base_ipq60xx.config > temp_config/base.config
          cat configs/base_${{ matrix.branch.short }}.config >> temp_config/base.config
          cat configs/${{ matrix.config }}.config >> temp_config/base.config
          
          # 提取当前设备的配置
          DEVICE_CONFIG=$(grep -E "CONFIG_TARGET_DEVICE.*_${{ matrix.device }}=y" temp_config/base.config || true)
          if [ -z "$DEVICE_CONFIG" ]; then
            echo "❌ 错误: 设备 ${{ matrix.device }} 在配置中未找到"
            exit 1
          fi
          
          # 生成最终配置
          echo "CONFIG_TARGET_${{ matrix.branch.short }}=y" > openwrt/.config
          echo "CONFIG_TARGET_${{ matrix.branch.short }}_ipq60xx=y" >> openwrt/.config
          echo "CONFIG_TARGET_MULTI_PROFILE=y" >> openwrt/.config
          echo "$DEVICE_CONFIG" >> openwrt/.config
          
          # 添加其他配置
          grep -vE "CONFIG_TARGET_DEVICE" temp_config/base.config >> openwrt/.config
          
          # 格式化配置文件
          sort -u openwrt/.config -o openwrt/.config
          
          echo "✅ 配置文件合并完成"

      - name: ${{ env ICON_DEBUG }} 验证配置差异
        run: |
          echo "🔍 验证配置合并差异..."
          
          # 提取合并前的软件包
          BEFORE_PACKAGES=$(grep -oE "CONFIG_PACKAGE_luci-app-[^=]+=y" configs/base_ipq60xx.config configs/base_${{ matrix.branch.short }}.config configs/${{ matrix.config }}.config | sort -u)
          
          # 提取合并后的软件包
          AFTER_PACKAGES=$(grep -oE "CONFIG_PACKAGE_luci-app-[^=]+=y" openwrt/.config | sort -u)
          
          # 比较差异
          if [ "$BEFORE_PACKAGES" != "$AFTER_PACKAGES" ]; then
            echo "⚠️ 发现配置差异:"
            diff <(echo "$BEFORE_PACKAGES") <(echo "$AFTER_PACKAGES") || true
          else
            echo "✅ 配置合并验证通过"
          fi

      - name: ${{ env ICON_PACKAGE }} 更新feeds
        run: |
          cd openwrt
          echo "📦 更新feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: ${{ env ICON_BUILD }} 执行DIY脚本
        run: |
          cd openwrt
          chmod +x ../${{ env.DIY_P1_SH }}
          ../${{ env.DIY_P1_SH }} ${{ matrix.branch.short }} ipq60xx

      - name: ${{ env ICON_BUILD }} 下载工具链
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: ${{ env ICON_BUILD }} 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          
          # 记录编译结果
          echo "compile_success=true" >> $GITHUB_OUTPUT
          
          # 获取内核版本
          KERNEL_VERSION=$(grep "CONFIG_LINUX_VERSION" .config | cut -d'"' -f2)
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT

      - name: ${{ env ICON_PACKAGE }} 整理产出物
        run: |
          echo "📦 整理产出物..."
          
          # 创建临时目录
          TEMP_DIR="${{ matrix.branch.short }}-${{ matrix.device }}-${{ matrix.config }}"
          mkdir -p $TEMP_DIR
          
          # 复制固件文件
          find openwrt/bin/targets/ -name "*${{ matrix.device }}*squashfs*" -type f | while read file; do
            if [[ $file == *factory.bin || $file == *sysupgrade.bin ]]; then
              # 提取文件类型
              FILE_TYPE=$(basename "$file" | grep -oE "(factory|sysupgrade)")
              
              # 重命名
              NEW_NAME="${{ matrix.branch.short }}-${{ matrix.device }}-${FILE_TYPE}-${{ matrix.config }}.bin"
              cp "$file" "$TEMP_DIR/$NEW_NAME"
              echo "📄 复制固件: $NEW_NAME"
            fi
          done
          
          # 复制配置文件
          cp openwrt/.config "$TEMP_DIR/${{ matrix.branch.short }}-${{ matrix.device }}-${{ matrix.config }}.config"
          cp openwrt/bin/targets/*/manifest "$TEMP_DIR/${{ matrix.branch.short }}-${{ matrix.device }}-${{ matrix.config }}.manifest" 2>/dev/null || true
          cp openwrt/config.buildinfo "$TEMP_DIR/${{ matrix.branch.short }}-${{ matrix.device }}-${{ matrix.config }}.config.buildinfo" 2>/dev/null || true
          
          # 复制软件包
          mkdir -p packages_temp
          find openwrt/bin/packages/ -name "*.ipk" -exec cp {} packages_temp/ \; 2>/dev/null || true
          
          # 保存临时目录供后续作业使用
          echo "temp_dir=$TEMP_DIR" >> $GITHUB_OUTPUT

      - name: ${{ env ICON_CACHE }} 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.branch.short }}-${{ matrix.device }}-${{ matrix.config }}
          path: ${{ steps.compile.outputs.temp_dir }}
          retention-days: 7

  # 发布作业：整理所有产物并发布
  release:
    needs: [setup, build]
    runs-on: ubuntu-22.04
    if: always() && needs.build.result == 'success'
    steps:
      - name: ${{ env ICON_START }} 检出代码
        uses: actions/checkout@v4

      - name: ${{ env ICON_PACKAGE }} 下载所有构建产物
        uses: actions/download-artifact@v3
        with:
          path: all_builds

      - name: ${{ env ICON_PACKAGE }} 整理发布包
        run: |
          echo "📦 整理发布包..."
          
          # 创建发布目录
          RELEASE_DIR="release_${{ needs.setup.outputs.build-date }}"
          mkdir -p $RELEASE_DIR/{firmware,config,logs,packages}
          
          # 整理固件
          find all_builds -name "*.bin" -type f -exec cp {} $RELEASE_DIR/firmware/ \;
          
          # 整理配置文件
          find all_builds -name "*.config" -o -name "*.manifest" -o -name "*.config.buildinfo" | while read file; do
            cp "$file" $RELEASE_DIR/config/
          done
          
          # 打包配置文件
          cd $RELEASE_DIR/config
          tar -czf ../ipq60xx-config.tar.gz *
          cd - > /dev/null
          
          # 整理软件包
          find all_builds -name "*.ipk" -type f -exec cp {} $RELEASE_DIR/packages/ \;
          cd $RELEASE_DIR/packages
          tar -czf ../ipq60xx-app.tar.gz *
          cd - > /dev/null
          
          # 创建发布说明
          cat > $RELEASE_DIR/README.md << EOF
          # OpenWrt 固件发布
          
          ## 基本信息
          - 默认管理地址: 192.168.111.1
          - 默认用户: root
          - 默认密码: none
          - 默认WIFI密码: 12345678
          
          ## 固件信息
          - 编译分支: openwrt, immwrt, libwrt
          - 支持设备: ${{ needs.setup.outputs.devices }}
          - 配置类型: Pro, Max, Ultra
          - 内核版本: ${{ needs.setup.outputs.kernel-version }}
          - 作者: Mary
          - 发布时间: ${{ needs.setup.outputs.build-date }}
          
          ## 文件说明
          - firmware/: 各设备固件文件
          - ipq60xx-config.tar.gz: 配置文件包
          - ipq60xx-app.tar.gz: 软件包
          
          ## 命名规则
          固件文件命名: 分支缩写-设备名称-类型(factory/sysupgrade)-配置(Pro/Max/Ultra).bin
          EOF

      - name: ${{ env ICON_PACKAGE }} 创建发布
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ipq60xx-${{ needs.setup.outputs.build-date }}
          name: OpenWrt Multi-Branch Build ${{ needs.setup.outputs.build-date }}
          body_path: release_${{ needs.setup.outputs.build-date }}/README.md
          files: |
            release_${{ needs.setup.outputs.build-date }}/firmware/*.bin
            release_${{ needs.setup.outputs.build-date }}/ipq60xx-*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ${{ env ICON_SUCCESS }} 编译完成通知
        run: |
          echo "✅ 所有固件编译完成！"
          echo "📊 编译统计:"
          echo "  - 分支: openwrt, immwrt, libwrt"
          echo "  - 设备: ${{ needs.setup.outputs.devices }}"
          echo "  - 配置: Pro, Max, Ultra"
          echo "  - 发布标签: ipq60xx-${{ needs.setup.outputs.build-date }}"

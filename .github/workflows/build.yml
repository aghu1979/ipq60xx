name: 🔨 OpenWrt 固件编译系统 (分层构建)

on:
  schedule:
    # 北京时间每周五0点 (UTC时间周四16点)
    - cron: '0 16 * * 4'
  workflow_dispatch:
    inputs:
      branch:
        description: '选择分支 (留空编译全部)'
        required: false
        type: choice
        options:
          - ''
          - openwrt
          - immwrt
          - libwrt
      config:
        description: '选择配置 (留空编译全部)'
        required: false
        type: choice
        options:
          - ''
          - Pro
          - max
          - ultra

env:
  UBUNTU_VERSION: 22.04
  REPO_OPENWRT: https://github.com/openwrt/openwrt.git
  REPO_IMMWRT: https://github.com/immortalwrt/immortalwrt.git
  REPO_LIBWRT: https://github.com/openwrt/openwrt.git

jobs:
  # ========================================
  # 链一：准备并缓存基础环境
  # ========================================
  prepare-base-environments:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - branch: openwrt
          branch: immwrt
          branch: libwrt
        config:
          - config: Pro
          config: max
          config: ultra
    outputs:
      openwrt-hash: ${{ steps.set_hash.outputs.openwrt-hash }}
      immwrt-hash: ${{ steps.set_hash.outputs.immwrt-hash }}
      libwrt-hash: ${{ steps.set_hash.outputs.libwrt-hash }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📁 验证目录结构
        run: |
          echo "🔍 当前工作目录: $(pwd)"
          echo "🔍 GITHUB_WORKSPACE: ${{ github.workspace }}"
          echo ""
          echo "📁 根目录结构："
          ls -la
          echo ""
          echo "📁 configs目录内容："
          if [ -d "configs" ]; then
            ls -la configs/
          else
            echo "❌ configs目录不存在"
            exit 1
          fi
          echo ""
          echo "📁 scripts目录内容："
          if [ -d "scripts" ]; then
            ls -la scripts/
          else
            echo "❌ scripts目录不存在"
            exit 1
          fi

      - name: 🧹 清理磁盘空间 (sbwml/actions/free-disk@main)
        uses: sbwml/actions/free-disk@main
        with:
          # 工具链大小 (MB)
          toolchain-size: 1024
          # Android SDK 大小 (MB)
          android-size: 1024
          # .NET 大小 (MB)
          dotnet-size: 1024
          # Haskell 大小 (MB)
          haskell-size: 0
          # swap大小 (MB)
          swap-size: 1024
          # 保留空间 (MB)
          reserve-size: 5120
          # 要删除的目录
          delete-docker-images: true
          # 删除包缓存
          delete-package-cache: true
          # 删除临时文件
          delete-temporary-files: true
          # 不删除未安装的包
          remove-uninstalled-packages: false

      - name: 🌍 设置环境变量
        run: |
          echo "REPO_SHORT=${{ matrix.branch }}" >> $GITHUB_ENV
          echo "SOC_NAME=ipq60xx" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +'%Y%m%d')" >> $GITHUB_ENV
          
          if [[ "${{ matrix.branch }}" == "openwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_OPENWRT}" >> $GITHUB_ENV
          elif [[ "${{ matrix.branch }}" == "immwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_IMMWRT}" >> $GITHUB_ENV
          else
            echo "REPO_URL=${{ env.REPO_LIBWRT}" >> $GITHUB_ENV
          fi

      - name: 🔐 计算基础配置哈希
        id: calc_hash
        run: |
          echo "📍 当前工作目录: $(pwd)"
          
          # 检查配置文件是否存在
          if [ ! -f "configs/base_${SOC_NAME}.config" ]; then
            echo "❌ 配置文件不存在: configs/base_${SOC_NAME}.config"
            echo "📁 configs目录内容："
            ls -la configs/ || echo "configs目录不存在"
            exit 1
          fi
          if [ ! -f "configs/base_${REPO_SHORT}.config" ]; then
            echo "❌ 配置文件不存在: configs/base_${REPO_SHORT}.config"
            echo "📁 configs目录内容："
            ls -la configs/ || echo "configs目录不存在"
            exit 1
          fi
          
          # 计算哈希值
          HASH=$(sha256sum configs/base_${SOC_NAME}.config configs/base_${REPO_SHORT}.config | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "${{ matrix.branch }}=${{ steps.calc_hash.outputs.hash }}" >> hashes.txt

      - name: 💾 缓存基础环境
        uses: actions/cache@v4
        with:
          path: |
            build/${{ matrix.branch }}/
            dl/
            feeds/
          key: base-${{ matrix.branch }}-${{ steps.calc_hash.outputs.hash }
          restore-keys: |
            base-${{ matrix.branch }-

      - name: 🚀 准备基础环境
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "📦 为 ${{ matrix.branch }} 准备基础环境..."
          chmod +x scripts/*.sh
          ./scripts/build.sh prepare-base

      - name: 📤 上传哈希文件
        if: matrix.branch == 'libwrt'
        uses: actions/upload-artifact@v4
        with:
          name: hashes-file
          path: hashes.txt

  # ========================================
  # 阶段二：在基础环境上编译最终固件
  # ========================================
  build-firmware:
    needs: prepare-base-en障
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - branch: openwrt
          config: Pro
          config: max
          config: ultra
          - branch: immwrt
            config: Pro
            config: max
            config: ultra
          - branch: libwrt
            config: Pro
            config: max
            config: ultra
    steps:
      - name: 📥 检出代码
        uses: actions/build@v4

      - name: 🧹 清理磁盘空间 (sbwml/actions/free-disk@main)
        uses: sbwml/actions/free-disk@main
        with:
          # 工具链大小 (MB)
          toolchain-size: 1024
          # Android SDK 大小 (MB)
          android-size: 1024
          # .NET 大小 (MB)
          dotnet-size: 1024
          # Haskell 大小 (MB)
          haskell-size: 0
          # swap大小 (MB)
          swap-size: 1024
          # 保留空间 (MB)
          reserve-size: 64
          # 要删除的目录
          delete-docker-images: true
          # 删除包缓存
          delete-package-cache: true
          # 删除临时文件
          delete-temporary-files: true
          # 不删除未安装的包
          remove-uninstalled-packages: false

      - name: 🔍 检查是否需要跳过当前矩阵任务
        id: check_skip
        run: |
          SKIP_BUILD=false
          
          if [[ "${{ github.event.inputs.branch }}" != "" && "${{ github.event.inputs.branch }}" != "${{ matrix.branch }}" ]]; then
            SKIP_BUILD=true
          fi
          
          if [[ "${{ github.event.inputs.config }}" != "" && "${{ github.event.inputs.config }}" != "${{ matrix.config }}" ]]; then
            SKIP_BUILD=true
          fi
          
          echo "skip=$SKIP_BUILD" >> $GITHUB_OUTPUT
          
          if [[ "$SKIP_BUILD" == "true" ]]; then
            echo "⏭️ 跳过构建: ${{ matrix.branch }}-${{ matrix.config }}"
          else
            echo "🔨 开始构建: ${{ matrix.branch }}-${{ matrix.config }}"
          fi

      - name: 🌍 设置环境变量
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          echo "REPO_SHORT=${{ matrix.branch }}" >> $GITHUB_ENV
          echo "SOC_NAME=ipq60xx" >> $GITHUB_ENV
          echo "CONFIG_LEVEL=${{ matrix.config }}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +'%Y%m%d')" >> $GITHUB_ENV
          
          if [[ "${{ matrix.branch }}" == "openwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_OPENWRT}" >> $G�始化
          elif [[ "${{ matrix.branch }}" == "immwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_IMMWRT}" >> $GITHUB_ENV
          else
            echo "REPO_URL=${ env.REPO_LIBWRT}" >> $GITHUB_ENV
          fi

      - name: 📥 下载哈希文件
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/download-artifact@v4
        with:
          name: hashes-file
          path: .

      - name: 🔍 读取对应分支的哈希值
        id: get_hash
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          HASH=$(grep "^${{ matrix.branch }}=" hashes.txt | cut -d'=' -f2)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "🔑 Retrieved hash for ${{ matrix.branch }}: $HASH"

      - name: 💾 恢复基础环境缓存
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/cache@v4
        with:
          path: |
            build/${{ matrix.branch }}/
            dl/
            feeds/
          key: base-${{ matrix.branch }}-${{ steps.get_hash.outputs.hash }

      - name: 🔨 编译固件
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          chmod +x scripts/*.sh
          ./scripts/build.sh build-firmware

      - name: 📊 显示系统资源使用情况
        if: always() && steps.check_skip.outputs.skip == 'false'
        run: |
          echo "=========================================="
          echo "📊 瓊 系统资源使用情况"
          echo "=========================================="
          df -h
          free -h
          echo "=========================================="

      - name: 📤 上传构建产物
        if: steps.check_skip.outputs.skip == 'reserve-size: 64
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.branch }}-${{ matrix.config }}
          path: |
            output/
            logs/
          retention-days: 7

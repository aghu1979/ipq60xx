name: 🔨 OpenWrt 固件编译系统 (分层构建)

on:
  schedule:
    # 北京时间每周五0点 (UTC时间周四16点)
    - cron: '0 16 * * 4'
  workflow_dispatch:
    inputs:
      branch:
        description: '选择分支 (留空编译全部)'
        required: false
        type: choice
        options:
          - ''
          - openwrt
          - immwrt
          - libwrt
      config:
        description: '选择配置 (留空编译全部)'
        required: false
        type: choice
        # --- 修改点：配置选项改为小写 ---
        options:
          - ''
          - pro
          - max
          - ultra

env:
  UBUNTU_VERSION: 22.04
  REPO_OPENWRT: https://github.com/openwrt/openwrt.git
  REPO_IMMWRT: https://github.com/immortalwrt/immortalwrt.git
  REPO_LIBWRT: https://github.com/openwrt/openwrt.git

jobs:
  # ========================================
  # 阶段一：准备并缓存基础环境 (包含依赖)
  # ========================================
  prepare-base-environments:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      # --- 修改点：修正 matrix 语法 ---
      matrix:
        branch: [openwrt, immwrt, libwrt]
    outputs:
      openwrt-hash: ${{ steps.set_hash.outputs.openwrt-hash }}
      immwrt-hash: ${{ steps.set_hash.outputs.immwrt-hash }}
      libwrt-hash: ${{ steps.set_hash.outputs.libwrt-hash }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      # --- 修改点：注释掉第一阶段的磁盘清理 ---
      # - name: 🧹 清理磁盘空间
      #   uses: jlumbroso/free-disk-space@main
      #   with:
      #     tool-cache: true
      #     android: true
      #     dotnet: true
      #     haskell: true
      #     docker-images: true
      #     large-packages: true
      #     swap-storage: true

      - name: 🌍 设置环境变量
        run: |
          echo "REPO_SHORT=${{ matrix.branch }}" >> $GITHUB_ENV
          echo "SOC_NAME=ipq60xx" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +'%Y%m%d')" >> $GITHUB_ENV
          
          if [[ "${{ matrix.branch }}" == "openwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_OPENWRT }}" >> $GITHUB_ENV
          elif [[ "${{ matrix.branch }}" == "immwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_IMMWRT }}" >> $GITHUB_ENV
          else
            echo "REPO_URL=${{ env.REPO_LIBWRT }}" >> $GITHUB_ENV
          fi

      - name: 🔐 计算综合哈希 (优化版)
        id: calc_hash
        run: |
          echo "📍 当前工作目录: $(pwd)"
          
          if [ ! -f "configs/base_${SOC_NAME}.config" ]; then
            echo "❌ 配置文件不存在: configs/base_${SOC_NAME}.config"
            exit 1
          fi
          if [ ! -f "configs/base_${REPO_SHORT}.config" ]; then
            echo "❌ 配置文件不存在: configs/base_${REPO_SHORT}.config"
            exit 1
          fi

          echo "🔍 计算综合哈希值，包含源码、配置和自定义脚本..."
          COMPREHENSIVE_HASH=$((
            echo "REPO_URL=${REPO_URL}"
            echo "REPO_BRANCH=${REPO_BRANCH}"
            cat scripts/diy.sh 2>/dev/null || echo " -"
            cat feeds.conf.default 2>/dev/null || echo " -"
            cat "configs/base_${SOC_NAME}.config"
            cat "configs/base_${REPO_SHORT}.config"
          ) | sha256sum | cut -d' ' -f1)
          
          echo "comprehensive-hash=$COMPREHENSIVE_HASH" >> $GITHUB_OUTPUT
          echo "${{ matrix.branch }}=${{ steps.calc_hash.outputs.comprehensive-hash }}" >> hashes.txt
          echo "🔑 综合哈希值: $COMPREHENSIVE_HASH"

      - name: 💾 缓存基础环境 (包含依赖)
        uses: actions/cache@v4
        with:
          path: |
            build/${{ matrix.branch }}/
            dl/
            feeds/
          key: base-${{ matrix.branch }}-${{ steps.calc_hash.outputs.comprehensive-hash }}
          restore-keys: |
            base-${{ matrix.branch }}-

      - name: 🚀 准备基础环境 (包含依赖下载)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "📦 为 ${{ matrix.branch }} 准备基础环境并下载依赖..."
          chmod +x scripts/*.sh
          ./scripts/build.sh prepare-base

      - name: 📤 上传哈希文件
        if: matrix.branch == 'libwrt'
        uses: actions/upload-artifact@v4
        with:
          name: hashes-file
          path: hashes.txt

  # ========================================
  # 阶段二：在基础环境上编译最终固件
  # ========================================
  build-firmware:
    needs: prepare-base-environments
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        branch: [openwrt, immwrt, libwrt]
        config: [pro, max, ultra]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🧹 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          docker-images: true
          large-packages: true
          swap-storage: true

      - name: 🔍 检查是否需要跳过当前矩阵任务
        id: check_skip
        run: |
          SKIP_BUILD=false
          
          if [[ "${{ github.event.inputs.branch }}" != "" && "${{ github.event.inputs.branch }}" != "${{ matrix.branch }}" ]]; then
            SKIP_BUILD=true
          fi
          
          if [[ "${{ github.event.inputs.config }}" != "" && "${{ github.event.inputs.config }}" != "${{ matrix.config }}" ]]; then
            SKIP_BUILD=true
          fi
          
          echo "skip=$SKIP_BUILD" >> $GITHUB_OUTPUT
          
          if [[ "$SKIP_BUILD" == "true" ]]; then
            echo "⏭️ 跳过构建: ${{ matrix.branch }}-${{ matrix.config }}"
          else
            echo "🔨 开始构建: ${{ matrix.branch }}-${{ matrix.config }}"
          fi

      - name: 🌍 设置环境变量
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          echo "REPO_SHORT=${{ matrix.branch }}" >> $GITHUB_ENV
          echo "SOC_NAME=ipq60xx" >> $GITHUB_ENV
          # --- 修改点：将CONFIG_LEVEL转换为小写 ---
          echo "CONFIG_LEVEL=$(echo '${{ matrix.config }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +'%Y%m%d')" >> $GITHUB_ENV
          
          if [[ "${{ matrix.branch }}" == "openwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_OPENWRT }}" >> $GITHUB_ENV
          elif [[ "${{ matrix.branch }}" == "immwrt" ]]; then
            echo "REPO_URL=${{ env.REPO_IMMWRT }}" >> $GITHUB_ENV
          else
            echo "REPO_URL=${{ env.REPO_LIBWRT }}" >> $GITHUB_ENV
          fi

      - name: 📥 下载哈希文件
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/download-artifact@v4
        with:
          name: hashes-file
          path: .

      - name: 🔍 读取对应分支的哈希值
        id: get_hash
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          HASH=$(grep "^${{ matrix.branch }}=" hashes.txt | cut -d'=' -f2)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "🔑 Retrieved hash for ${{ matrix.branch }}: $HASH"

      - name: 💾 恢复基础环境缓存 (包含依赖)
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/cache@v4
        with:
          path: |
            build/${{ matrix.branch }}/
            dl/
            feeds/
          key: base-${{ matrix.branch }}-${{ steps.get_hash.outputs.hash }}

      - name: 💾 恢复/保存增量编译缓存
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/cache@v4
        with:
          path: build/${{ matrix.branch }}/
          key: build-${{ matrix.branch }}
          restore-keys: |
            build-${{ matrix.branch }}-

      - name: 🔨 编译固件
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          chmod +x scripts/*.sh
          ./scripts/build.sh build-firmware

      - name: 📊 显示系统资源使用情况
        if: always() && steps.check_skip.outputs.skip == 'false'
        run: |
          echo "=========================================="
          echo "📊 系统资源使用情况"
          echo "=========================================="
          df -h
          free -h
          echo "=========================================="

      - name: 📤 上传构建产物
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.branch }}-${{ matrix.config }}
          path: |
            output/
            logs/
          retention-days: 7

      # 添加错误日志上传步骤
      - name: 📤 上传错误日志 (如果有)
        if: failure() && steps.check_skip.outputs.skip == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-${{ matrix.branch }}-${{ matrix.config }}
          path: |
            logs/dependency-errors.log
            logs/*-dependency-errors.log
          retention-days: 30
